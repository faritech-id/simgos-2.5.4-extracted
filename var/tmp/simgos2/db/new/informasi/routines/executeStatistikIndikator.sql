-- --------------------------------------------------------
-- Host:                         192.168.137.2
-- Versi server:                 8.0.11 - MySQL Community Server - GPL
-- OS Server:                    Linux
-- HeidiSQL Versi:               10.2.0.5599
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- membuang struktur untuk procedure informasi.executeStatistikIndikator
DROP PROCEDURE IF EXISTS `executeStatistikIndikator`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `executeStatistikIndikator`(
	IN `PTGL_AWAL` DATE,
	IN `PTGL_AKHIR` DATE
)
BEGIN
	DECLARE VTAHUN SMALLINT;
	DECLARE VPERIODE CHAR(3);
	DECLARE VBOR DECIMAL(10,2);
	DECLARE VALOS DECIMAL(10,2);
	DECLARE VBTO DECIMAL(10,2);
	DECLARE VTOI DECIMAL(10,2);
	DECLARE VNDR DECIMAL(10,2);
	DECLARE VGDR DECIMAL(10,2);
	
	BEGIN
		DECLARE EXEC_NOT_FOUND_BULANAN TINYINT DEFAULT FALSE;		
		DECLARE CR_EXEC_BULANAN CURSOR FOR 
			SELECT IF(MONTH(t.TANGGAL)>=1 AND MONTH(t.TANGGAL)<=12,YEAR(t.TANGGAL),'') TAHUN
					 , MONTH(t.TANGGAL) BULAN				 
					 , ROUND((SUM(HP) * 100) / ((TTIDUR) * (SUM(JMLHARI))),2) bor
					 , ROUND((SUM(LD) / SUM(JMLKLR)),2) alos
					 , (SUM(JMLKLR) / (TTIDUR)) bto
					 , ROUND(((TTIDUR * SUM(JMLHARI)) - SUM(hp)) / (SUM(JMLKLR)),2) toi
					 , ((SUM(LEBIH48JAM)*1000)/SUM(JMLKLR)) ndr
					 , (((SUM(KURANG48JAM)+SUM(LEBIH48JAM))*1000)/SUM(JMLKLR)) gdr
			  FROM informasi.indikator_rs r
				    , master.tanggal t
			 WHERE r.TANGGAL=t.TANGGAL AND t.TANGGAL BETWEEN PTGL_AWAL AND PTGL_AKHIR
	       GROUP BY TAHUN, BULAN;
			
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET EXEC_NOT_FOUND_BULANAN = TRUE;
						
		OPEN CR_EXEC_BULANAN;
						
		EXIT_EXEC_BULANAN: LOOP
			FETCH CR_EXEC_BULANAN INTO VTAHUN, VPERIODE, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR;
			
			IF EXEC_NOT_FOUND_BULANAN THEN
				UPDATE temp.temp t SET t.ID = 0 WHERE t.ID = 0;
				LEAVE EXIT_EXEC_BULANAN;
			END IF;
			
			SET VBOR = IF(VBOR IS NULL, 0, VBOR);
			SET VALOS = IF(VALOS IS NULL, 0, VALOS);
			SET VBTO = IF(VBTO IS NULL, 0, VBTO);
			SET VTOI = IF(VTOI IS NULL, 0, VTOI);
			SET VNDR = IF(VNDR IS NULL, 0, VNDR);
			SET VGDR = IF(VGDR IS NULL, 0, VGDR);		
			
			IF EXISTS(SELECT 1 
					FROM informasi.statistik_indikator si 
				  WHERE si.TAHUN = VTAHUN
				    AND si.PERIODE = VPERIODE
					 AND si.JENIS = 1) THEN
				UPDATE informasi.statistik_indikator si
				   SET si.BOR = VBOR, si.ALOS = VALOS, si.BTO = VBTO, si.TOI = VTOI, si.NDR = VNDR, si.GDR = VGDR
				 WHERE si.TAHUN = VTAHUN
				   AND si.PERIODE = VPERIODE
					AND si.JENIS = 1;
			ELSE
				REPLACE INTO informasi.statistik_indikator(TAHUN, PERIODE, JENIS, BOR, ALOS, BTO, TOI, NDR, GDR)
				VALUES (VTAHUN, VPERIODE, 1, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR);
			END IF;
		END LOOP;
		
		CLOSE CR_EXEC_BULANAN;
	END;
	
	BEGIN
		DECLARE EXEC_NOT_FOUND_TRIWULAN TINYINT DEFAULT FALSE;		
		DECLARE CR_EXEC_TRIWULAN CURSOR FOR 
			SELECT IF(MONTH(t.TANGGAL)>=1 AND MONTH(t.TANGGAL)<=12,YEAR(t.TANGGAL),'') TAHUN
					 , IF(MONTH(t.TANGGAL)>=1 AND MONTH(t.TANGGAL)<=3,'tw1',
					    IF(MONTH(t.TANGGAL)>=4 AND MONTH(t.TANGGAL)<=6,'tw2',
					     IF(MONTH(t.TANGGAL)>=7 AND MONTH(t.TANGGAL)<=9,'tw3',
					       IF(MONTH(t.TANGGAL)>=10 AND MONTH(t.TANGGAL)<=12,'tw4','')
						  )
						 )
						) TRIWULAN				 
					 , ROUND((SUM(HP) * 100) / ((TTIDUR) * (SUM(JMLHARI))),2) bor
					 , ROUND((SUM(LD) / SUM(JMLKLR)),2) alos
					 , (SUM(JMLKLR) / (TTIDUR)) bto
					 , ROUND(((TTIDUR * SUM(JMLHARI)) - SUM(hp)) / (SUM(JMLKLR)),2) toi
					 , ((SUM(LEBIH48JAM)*1000)/SUM(JMLKLR)) ndr
					 , (((SUM(KURANG48JAM)+SUM(LEBIH48JAM))*1000)/SUM(JMLKLR)) gdr
			  FROM informasi.indikator_rs r
				    , master.tanggal t
			 WHERE r.TANGGAL=t.TANGGAL AND t.TANGGAL BETWEEN PTGL_AWAL AND PTGL_AKHIR
	       GROUP BY TAHUN, TRIWULAN;
			
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET EXEC_NOT_FOUND_TRIWULAN = TRUE;
						
		OPEN CR_EXEC_TRIWULAN;
						
		EXIT_EXEC_TRIWULAN: LOOP
			FETCH CR_EXEC_TRIWULAN INTO VTAHUN, VPERIODE, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR;
			
			IF EXEC_NOT_FOUND_TRIWULAN THEN
				UPDATE temp.temp t SET t.ID = 0 WHERE t.ID = 0;
				LEAVE EXIT_EXEC_TRIWULAN;
			END IF;
			
			SET VBOR = IF(VBOR IS NULL, 0, VBOR);
			SET VALOS = IF(VALOS IS NULL, 0, VALOS);
			SET VBTO = IF(VBTO IS NULL, 0, VBTO);
			SET VTOI = IF(VTOI IS NULL, 0, VTOI);
			SET VNDR = IF(VNDR IS NULL, 0, VNDR);
			SET VGDR = IF(VGDR IS NULL, 0, VGDR);
			
			IF EXISTS(SELECT 1 
					FROM informasi.statistik_indikator si 
				  WHERE si.TAHUN = VTAHUN
				    AND si.PERIODE = VPERIODE
					 AND si.JENIS = 2) THEN
				UPDATE informasi.statistik_indikator si
				   SET si.BOR = VBOR, si.ALOS = VALOS, si.BTO = VBTO, si.TOI = VTOI, si.NDR = VNDR, si.GDR = VGDR
				 WHERE si.TAHUN = VTAHUN
				   AND si.PERIODE = VPERIODE
					AND si.JENIS = 2;
			ELSE
				REPLACE INTO informasi.statistik_indikator(TAHUN, PERIODE, JENIS, BOR, ALOS, BTO, TOI, NDR, GDR)
				VALUES (VTAHUN, VPERIODE, 2, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR);
			END IF;
		END LOOP;
		
		CLOSE CR_EXEC_TRIWULAN;
	END;
	
	BEGIN
		DECLARE EXEC_NOT_FOUND_TAHUNAN TINYINT DEFAULT FALSE;		
		DECLARE CR_EXEC_TAHUNAN CURSOR FOR 
			SELECT IF(MONTH(t.TANGGAL)>=1 AND MONTH(t.TANGGAL)<=12,YEAR(t.TANGGAL),'') TAHUN
					 , 0			 
					 , ROUND((SUM(HP) * 100) / ((TTIDUR) * (SUM(JMLHARI))),2) bor
					 , ROUND((SUM(LD) / SUM(JMLKLR)),2) alos
					 , (SUM(JMLKLR) / (TTIDUR)) bto
					 , ROUND(((TTIDUR * SUM(JMLHARI)) - SUM(hp)) / (SUM(JMLKLR)),2) toi
					 , ((SUM(LEBIH48JAM)*1000)/SUM(JMLKLR)) ndr
					 , (((SUM(KURANG48JAM)+SUM(LEBIH48JAM))*1000)/SUM(JMLKLR)) gdr
			  FROM informasi.indikator_rs r
				    , master.tanggal t
			 WHERE r.TANGGAL=t.TANGGAL AND t.TANGGAL BETWEEN PTGL_AWAL AND PTGL_AKHIR
	       GROUP BY TAHUN;
			
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET EXEC_NOT_FOUND_TAHUNAN = TRUE;
						
		OPEN CR_EXEC_TAHUNAN;
						
		EXIT_EXEC_TAHUNAN: LOOP
			FETCH CR_EXEC_TAHUNAN INTO VTAHUN, VPERIODE, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR;
			
			IF EXEC_NOT_FOUND_TAHUNAN THEN
				UPDATE temp.temp t SET t.ID = 0 WHERE t.ID = 0;
				LEAVE EXIT_EXEC_TAHUNAN;
			END IF;
			
			SET VBOR = IF(VBOR IS NULL, 0, VBOR);
			SET VALOS = IF(VALOS IS NULL, 0, VALOS);
			SET VBTO = IF(VBTO IS NULL, 0, VBTO);
			SET VTOI = IF(VTOI IS NULL, 0, VTOI);
			SET VNDR = IF(VNDR IS NULL, 0, VNDR);
			SET VGDR = IF(VGDR IS NULL, 0, VGDR);
			
			IF EXISTS(SELECT 1 
					FROM informasi.statistik_indikator si 
				  WHERE si.TAHUN = VTAHUN
				    AND si.PERIODE = VPERIODE
					 AND si.JENIS = 3) THEN
				UPDATE informasi.statistik_indikator si
				   SET si.BOR = VBOR, si.ALOS = VALOS, si.BTO = VBTO, si.TOI = VTOI, si.NDR = VNDR, si.GDR = VGDR
				 WHERE si.TAHUN = VTAHUN
				   AND si.PERIODE = VPERIODE
					AND si.JENIS = 3;
			ELSE
				REPLACE INTO informasi.statistik_indikator(TAHUN, PERIODE, JENIS, BOR, ALOS, BTO, TOI, NDR, GDR)
				VALUES (VTAHUN, VPERIODE, 3, VBOR, VALOS, VBTO, VTOI, VNDR, VGDR);
			END IF;
		END LOOP;
		
		CLOSE CR_EXEC_TAHUNAN;
	END;
END//
DELIMITER ;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
